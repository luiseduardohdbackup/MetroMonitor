//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace MetroMonitor.DesktopInterface.MetroMonitorWebRepository {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ResultsData ResultValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ResultsData ResultValue {
            get {
                return this.ResultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultValueField, value) != true)) {
                    this.ResultValueField = value;
                    this.RaisePropertyChanged("ResultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultsData", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class ResultsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.Result ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.Result Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.Entities")]
    public partial class Result : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AverageReadField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCounterBase DeviceCounterField;
        
        private int IdField;
        
        private int IntervalsField;
        
        private System.DateTime LogDateField;
        
        private double MaximumReadField;
        
        private double MinimumReadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageRead {
            get {
                return this.AverageReadField;
            }
            set {
                if ((this.AverageReadField.Equals(value) != true)) {
                    this.AverageReadField = value;
                    this.RaisePropertyChanged("AverageRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCounterBase DeviceCounter {
            get {
                return this.DeviceCounterField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceCounterField, value) != true)) {
                    this.DeviceCounterField = value;
                    this.RaisePropertyChanged("DeviceCounter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Intervals {
            get {
                return this.IntervalsField;
            }
            set {
                if ((this.IntervalsField.Equals(value) != true)) {
                    this.IntervalsField = value;
                    this.RaisePropertyChanged("Intervals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogDate {
            get {
                return this.LogDateField;
            }
            set {
                if ((this.LogDateField.Equals(value) != true)) {
                    this.LogDateField = value;
                    this.RaisePropertyChanged("LogDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaximumRead {
            get {
                return this.MaximumReadField;
            }
            set {
                if ((this.MaximumReadField.Equals(value) != true)) {
                    this.MaximumReadField = value;
                    this.RaisePropertyChanged("MaximumRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinimumRead {
            get {
                return this.MinimumReadField;
            }
            set {
                if ((this.MinimumReadField.Equals(value) != true)) {
                    this.MinimumReadField = value;
                    this.RaisePropertyChanged("MinimumRead");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCounterBase", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.Entities")]
    public partial class DeviceCounterBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> DeletedField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.Device DeviceField;
        
        private int IdField;
        
        private int LogIntervalField;
        
        private double MaxThresholdField;
        
        private double MinThresholdField;
        
        private int ReadIntervalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.Device Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogInterval {
            get {
                return this.LogIntervalField;
            }
            set {
                if ((this.LogIntervalField.Equals(value) != true)) {
                    this.LogIntervalField = value;
                    this.RaisePropertyChanged("LogInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxThreshold {
            get {
                return this.MaxThresholdField;
            }
            set {
                if ((this.MaxThresholdField.Equals(value) != true)) {
                    this.MaxThresholdField = value;
                    this.RaisePropertyChanged("MaxThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinThreshold {
            get {
                return this.MinThresholdField;
            }
            set {
                if ((this.MinThresholdField.Equals(value) != true)) {
                    this.MinThresholdField = value;
                    this.RaisePropertyChanged("MinThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReadInterval {
            get {
                return this.ReadIntervalField;
            }
            set {
                if ((this.ReadIntervalField.Equals(value) != true)) {
                    this.ReadIntervalField = value;
                    this.RaisePropertyChanged("ReadInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.Entities")]
    public partial class Device : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCounterBase> CountersField;
        
        private System.Nullable<int> DeletedField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCounterBase> Counters {
            get {
                return this.CountersField;
            }
            set {
                if ((object.ReferenceEquals(this.CountersField, value) != true)) {
                    this.CountersField = value;
                    this.RaisePropertyChanged("Counters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCreate", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceCreate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DeviceNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceEdit", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceEdit : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCounterSummary> CountersField;
        
        private string DeviceNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCounterSummary> Counters {
            get {
                return this.CountersField;
            }
            set {
                if ((object.ReferenceEquals(this.CountersField, value) != true)) {
                    this.CountersField = value;
                    this.RaisePropertyChanged("Counters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCounterSummary", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceCounterSummary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class DeviceDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCreate deviceCreateField;
        
        private int deviceDeleteField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDetails deviceDetailsField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceEdit deviceEditField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceList devicelistField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCreate deviceCreate {
            get {
                return this.deviceCreateField;
            }
            set {
                if ((object.ReferenceEquals(this.deviceCreateField, value) != true)) {
                    this.deviceCreateField = value;
                    this.RaisePropertyChanged("deviceCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int deviceDelete {
            get {
                return this.deviceDeleteField;
            }
            set {
                if ((this.deviceDeleteField.Equals(value) != true)) {
                    this.deviceDeleteField = value;
                    this.RaisePropertyChanged("deviceDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDetails deviceDetails {
            get {
                return this.deviceDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.deviceDetailsField, value) != true)) {
                    this.deviceDetailsField = value;
                    this.RaisePropertyChanged("deviceDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceEdit deviceEdit {
            get {
                return this.deviceEditField;
            }
            set {
                if ((object.ReferenceEquals(this.deviceEditField, value) != true)) {
                    this.deviceEditField = value;
                    this.RaisePropertyChanged("deviceEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceList devicelist {
            get {
                return this.devicelistField;
            }
            set {
                if ((object.ReferenceEquals(this.devicelistField, value) != true)) {
                    this.devicelistField = value;
                    this.RaisePropertyChanged("devicelist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceDetails", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string DeviceNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceList", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDetails> DevicesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDetails> Devices {
            get {
                return this.DevicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DevicesField, value) != true)) {
                    this.DevicesField = value;
                    this.RaisePropertyChanged("Devices");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterCreate", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class CounterCreate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CounterDefinitifionIdField;
        
        private int DeviceIdField;
        
        private string DeviceNameField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterBase MetricField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterDefinitifionId {
            get {
                return this.CounterDefinitifionIdField;
            }
            set {
                if ((this.CounterDefinitifionIdField.Equals(value) != true)) {
                    this.CounterDefinitifionIdField = value;
                    this.RaisePropertyChanged("CounterDefinitifionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((this.DeviceIdField.Equals(value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterBase Metric {
            get {
                return this.MetricField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricField, value) != true)) {
                    this.MetricField = value;
                    this.RaisePropertyChanged("Metric");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterBase", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class CounterBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int LogIntervalField;
        
        private int MaxThresholdField;
        
        private int MinThresholdField;
        
        private int ReadIntervalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogInterval {
            get {
                return this.LogIntervalField;
            }
            set {
                if ((this.LogIntervalField.Equals(value) != true)) {
                    this.LogIntervalField = value;
                    this.RaisePropertyChanged("LogInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxThreshold {
            get {
                return this.MaxThresholdField;
            }
            set {
                if ((this.MaxThresholdField.Equals(value) != true)) {
                    this.MaxThresholdField = value;
                    this.RaisePropertyChanged("MaxThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinThreshold {
            get {
                return this.MinThresholdField;
            }
            set {
                if ((this.MinThresholdField.Equals(value) != true)) {
                    this.MinThresholdField = value;
                    this.RaisePropertyChanged("MinThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReadInterval {
            get {
                return this.ReadIntervalField;
            }
            set {
                if ((this.ReadIntervalField.Equals(value) != true)) {
                    this.ReadIntervalField = value;
                    this.RaisePropertyChanged("ReadInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditCounter", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class EditCounter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DeviceIdField;
        
        private string DeviceNameField;
        
        private int IdField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterBase UpdatedCounterDetailsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((this.DeviceIdField.Equals(value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterBase UpdatedCounterDetails {
            get {
                return this.UpdatedCounterDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatedCounterDetailsField, value) != true)) {
                    this.UpdatedCounterDetailsField = value;
                    this.RaisePropertyChanged("UpdatedCounterDetails");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class CounterDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterComboBox> ComboBoxDataField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDetails MetricDetailsField;
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDetails> MetricDetailsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterComboBox> ComboBoxData {
            get {
                return this.ComboBoxDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ComboBoxDataField, value) != true)) {
                    this.ComboBoxDataField = value;
                    this.RaisePropertyChanged("ComboBoxData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDetails MetricDetails {
            get {
                return this.MetricDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricDetailsField, value) != true)) {
                    this.MetricDetailsField = value;
                    this.RaisePropertyChanged("MetricDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDetails> MetricDetailsList {
            get {
                return this.MetricDetailsListField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricDetailsListField, value) != true)) {
                    this.MetricDetailsListField = value;
                    this.RaisePropertyChanged("MetricDetailsList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterDetails", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class CounterDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterBase CounterField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDetails DeviceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterBase Counter {
            get {
                return this.CounterField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterField, value) != true)) {
                    this.CounterField = value;
                    this.RaisePropertyChanged("Counter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDetails Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterComboBox", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class CounterComboBox : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryField;
        
        private string CounterField;
        
        private string InstanceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Counter {
            get {
                return this.CounterField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterField, value) != true)) {
                    this.CounterField = value;
                    this.RaisePropertyChanged("Counter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceName {
            get {
                return this.InstanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceNameField, value) != true)) {
                    this.InstanceNameField = value;
                    this.RaisePropertyChanged("InstanceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService")]
    public partial class GraphDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.GraphCounterDataContract, System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ResultsDataContract>> PlottingDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.GraphCounterDataContract, System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ResultsDataContract>> PlottingData {
            get {
                return this.PlottingDataField;
            }
            set {
                if ((object.ReferenceEquals(this.PlottingDataField, value) != true)) {
                    this.PlottingDataField = value;
                    this.RaisePropertyChanged("PlottingData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphCounterDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class GraphCounterDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CounterDescriptionField;
        
        private string InstanceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterDescription {
            get {
                return this.CounterDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterDescriptionField, value) != true)) {
                    this.CounterDescriptionField = value;
                    this.RaisePropertyChanged("CounterDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceName {
            get {
                return this.InstanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceNameField, value) != true)) {
                    this.InstanceNameField = value;
                    this.RaisePropertyChanged("InstanceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultsDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class ResultsDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AverageReadField;
        
        private int IdField;
        
        private int IntervalsField;
        
        private System.DateTime LogDateField;
        
        private double MaximumReadField;
        
        private double MinimumReadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageRead {
            get {
                return this.AverageReadField;
            }
            set {
                if ((this.AverageReadField.Equals(value) != true)) {
                    this.AverageReadField = value;
                    this.RaisePropertyChanged("AverageRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Intervals {
            get {
                return this.IntervalsField;
            }
            set {
                if ((this.IntervalsField.Equals(value) != true)) {
                    this.IntervalsField = value;
                    this.RaisePropertyChanged("Intervals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogDate {
            get {
                return this.LogDateField;
            }
            set {
                if ((this.LogDateField.Equals(value) != true)) {
                    this.LogDateField = value;
                    this.RaisePropertyChanged("LogDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaximumRead {
            get {
                return this.MaximumReadField;
            }
            set {
                if ((this.MaximumReadField.Equals(value) != true)) {
                    this.MaximumReadField = value;
                    this.RaisePropertyChanged("MaximumRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinimumRead {
            get {
                return this.MinimumReadField;
            }
            set {
                if ((this.MinimumReadField.Equals(value) != true)) {
                    this.MinimumReadField = value;
                    this.RaisePropertyChanged("MinimumRead");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticsDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class StatisticsDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.StatusDataStatus statusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.StatusDataStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusData.Status", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public enum StatusDataStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceStatusResult", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class DeviceStatusResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DeviceNameField;
        
        private int IdField;
        
        private MetroMonitor.DesktopInterface.MetroMonitorWebRepository.StatusDataStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.DesktopInterface.MetroMonitorWebRepository.StatusDataStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetroMonitorWebRepository.IDataRepository")]
    public interface IDataRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataRepository/GetData", ReplyAction="http://tempuri.org/IDataRepository/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataRepository/GetResult", ReplyAction="http://tempuri.org/IDataRepository/GetResultResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType> GetResultAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataRepository/GetTestData", ReplyAction="http://tempuri.org/IDataRepository/GetTestDataResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType> GetTestDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataRepository/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IDataRepository/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType> GetDataUsingDataContractAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataRepositoryChannel : MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IDataRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataRepositoryClient : System.ServiceModel.ClientBase<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IDataRepository>, MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IDataRepository {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DataRepositoryClient() : 
                base(DataRepositoryClient.GetDefaultBinding(), DataRepositoryClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDataRepository.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataRepositoryClient(EndpointConfiguration endpointConfiguration) : 
                base(DataRepositoryClient.GetBindingForEndpoint(endpointConfiguration), DataRepositoryClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataRepositoryClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DataRepositoryClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataRepositoryClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DataRepositoryClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType> GetResultAsync() {
            return base.Channel.GetResultAsync();
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType> GetTestDataAsync() {
            return base.Channel.GetTestDataAsync();
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType> GetDataUsingDataContractAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDataRepository)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDataRepository)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:3460/DataRepository.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return DataRepositoryClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDataRepository);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return DataRepositoryClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDataRepository);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IDataRepository,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetroMonitorWebRepository.IDeviceContracts")]
    public interface IDeviceContracts {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceContracts/AddDevice", ReplyAction="http://tempuri.org/IDeviceContracts/AddDeviceResponse")]
        System.Threading.Tasks.Task<bool> AddDeviceAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCreate device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceContracts/DeleteDevice", ReplyAction="http://tempuri.org/IDeviceContracts/DeleteDeviceResponse")]
        System.Threading.Tasks.Task<bool> DeleteDeviceAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceContracts/EditDevice", ReplyAction="http://tempuri.org/IDeviceContracts/EditDeviceResponse")]
        System.Threading.Tasks.Task<bool> EditDeviceAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceEdit device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceContracts/DeviceDetails", ReplyAction="http://tempuri.org/IDeviceContracts/DeviceDetailsResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDataContract> DeviceDetailsAsync(int DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceContracts/LoadDeviceList", ReplyAction="http://tempuri.org/IDeviceContracts/LoadDeviceListResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDataContract> LoadDeviceListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeviceContractsChannel : MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IDeviceContracts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeviceContractsClient : System.ServiceModel.ClientBase<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IDeviceContracts>, MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IDeviceContracts {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DeviceContractsClient() : 
                base(DeviceContractsClient.GetDefaultBinding(), DeviceContractsClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDeviceContracts.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeviceContractsClient(EndpointConfiguration endpointConfiguration) : 
                base(DeviceContractsClient.GetBindingForEndpoint(endpointConfiguration), DeviceContractsClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeviceContractsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DeviceContractsClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeviceContractsClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DeviceContractsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeviceContractsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> AddDeviceAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceCreate device) {
            return base.Channel.AddDeviceAsync(device);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDeviceAsync(int deviceId) {
            return base.Channel.DeleteDeviceAsync(deviceId);
        }
        
        public System.Threading.Tasks.Task<bool> EditDeviceAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceEdit device) {
            return base.Channel.EditDeviceAsync(device);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDataContract> DeviceDetailsAsync(int DeviceId) {
            return base.Channel.DeviceDetailsAsync(DeviceId);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceDataContract> LoadDeviceListAsync() {
            return base.Channel.LoadDeviceListAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDeviceContracts)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDeviceContracts)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:3460/DataRepository.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return DeviceContractsClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDeviceContracts);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return DeviceContractsClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDeviceContracts);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IDeviceContracts,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetroMonitorWebRepository.ICounterContracts")]
    public interface ICounterContracts {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICounterContracts/AddMetric", ReplyAction="http://tempuri.org/ICounterContracts/AddMetricResponse")]
        System.Threading.Tasks.Task<bool> AddMetricAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterCreate counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICounterContracts/DeleteMetric", ReplyAction="http://tempuri.org/ICounterContracts/DeleteMetricResponse")]
        System.Threading.Tasks.Task<bool> DeleteMetricAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICounterContracts/EditMetric", ReplyAction="http://tempuri.org/ICounterContracts/EditMetricResponse")]
        System.Threading.Tasks.Task<bool> EditMetricAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.EditCounter counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICounterContracts/MetricDetails", ReplyAction="http://tempuri.org/ICounterContracts/MetricDetailsResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDataContract> MetricDetailsAsync(int counterId, int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICounterContracts/LoadMetricList", ReplyAction="http://tempuri.org/ICounterContracts/LoadMetricListResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDataContract> LoadMetricListAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICounterContracts/ComboBoxCounterData", ReplyAction="http://tempuri.org/ICounterContracts/ComboBoxCounterDataResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDataContract> ComboBoxCounterDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICounterContractsChannel : MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ICounterContracts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CounterContractsClient : System.ServiceModel.ClientBase<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ICounterContracts>, MetroMonitor.DesktopInterface.MetroMonitorWebRepository.ICounterContracts {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CounterContractsClient() : 
                base(CounterContractsClient.GetDefaultBinding(), CounterContractsClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICounterContracts.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CounterContractsClient(EndpointConfiguration endpointConfiguration) : 
                base(CounterContractsClient.GetBindingForEndpoint(endpointConfiguration), CounterContractsClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CounterContractsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CounterContractsClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CounterContractsClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CounterContractsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CounterContractsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> AddMetricAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterCreate counter) {
            return base.Channel.AddMetricAsync(counter);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMetricAsync(int id) {
            return base.Channel.DeleteMetricAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> EditMetricAsync(MetroMonitor.DesktopInterface.MetroMonitorWebRepository.EditCounter counter) {
            return base.Channel.EditMetricAsync(counter);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDataContract> MetricDetailsAsync(int counterId, int deviceId) {
            return base.Channel.MetricDetailsAsync(counterId, deviceId);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDataContract> LoadMetricListAsync(int deviceId) {
            return base.Channel.LoadMetricListAsync(deviceId);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.CounterDataContract> ComboBoxCounterDataAsync() {
            return base.Channel.ComboBoxCounterDataAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICounterContracts)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICounterContracts)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:3460/DataRepository.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return CounterContractsClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICounterContracts);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return CounterContractsClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICounterContracts);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ICounterContracts,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetroMonitorWebRepository.IGraphContract")]
    public interface IGraphContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphContract/MetricsOverveiwForDevice", ReplyAction="http://tempuri.org/IGraphContract/MetricsOverveiwForDeviceResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.GraphDataContract> MetricsOverveiwForDeviceAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphContract/GetResultsSet", ReplyAction="http://tempuri.org/IGraphContract/GetResultsSetResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.GraphDataContract> GetResultsSetAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphContract/TestService", ReplyAction="http://tempuri.org/IGraphContract/TestServiceResponse")]
        System.Threading.Tasks.Task<int> TestServiceAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGraphContractChannel : MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IGraphContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GraphContractClient : System.ServiceModel.ClientBase<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IGraphContract>, MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IGraphContract {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GraphContractClient() : 
                base(GraphContractClient.GetDefaultBinding(), GraphContractClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IGraphContract.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GraphContractClient(EndpointConfiguration endpointConfiguration) : 
                base(GraphContractClient.GetBindingForEndpoint(endpointConfiguration), GraphContractClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GraphContractClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GraphContractClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GraphContractClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GraphContractClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GraphContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.GraphDataContract> MetricsOverveiwForDeviceAsync(int deviceId) {
            return base.Channel.MetricsOverveiwForDeviceAsync(deviceId);
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.GraphDataContract> GetResultsSetAsync(int deviceId) {
            return base.Channel.GetResultsSetAsync(deviceId);
        }
        
        public System.Threading.Tasks.Task<int> TestServiceAsync() {
            return base.Channel.TestServiceAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IGraphContract)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IGraphContract)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:3460/DataRepository.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return GraphContractClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IGraphContract);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return GraphContractClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IGraphContract);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IGraphContract,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetroMonitorWebRepository.IStatisticsContract")]
    public interface IStatisticsContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatisticsContract/GetCurrentStatus", ReplyAction="http://tempuri.org/IStatisticsContract/GetCurrentStatusResponse")]
        System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.StatisticsDataContract> GetCurrentStatusAsync(int counterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStatisticsContract/GetStatusesForAllDevices", ReplyAction="http://tempuri.org/IStatisticsContract/GetStatusesForAllDevicesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceStatusResult>> GetStatusesForAllDevicesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStatisticsContractChannel : MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IStatisticsContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatisticsContractClient : System.ServiceModel.ClientBase<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IStatisticsContract>, MetroMonitor.DesktopInterface.MetroMonitorWebRepository.IStatisticsContract {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public StatisticsContractClient() : 
                base(StatisticsContractClient.GetDefaultBinding(), StatisticsContractClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IStatisticsContract.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StatisticsContractClient(EndpointConfiguration endpointConfiguration) : 
                base(StatisticsContractClient.GetBindingForEndpoint(endpointConfiguration), StatisticsContractClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StatisticsContractClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(StatisticsContractClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StatisticsContractClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(StatisticsContractClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StatisticsContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.StatisticsDataContract> GetCurrentStatusAsync(int counterId) {
            return base.Channel.GetCurrentStatusAsync(counterId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MetroMonitor.DesktopInterface.MetroMonitorWebRepository.DeviceStatusResult>> GetStatusesForAllDevicesAsync() {
            return base.Channel.GetStatusesForAllDevicesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStatisticsContract)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStatisticsContract)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:3460/DataRepository.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return StatisticsContractClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IStatisticsContract);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return StatisticsContractClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IStatisticsContract);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IStatisticsContract,
        }
    }
}
