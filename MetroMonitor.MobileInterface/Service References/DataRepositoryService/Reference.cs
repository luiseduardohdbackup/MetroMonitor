//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MetroMonitor.MobileInterface.DataRepositoryService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.ResultsData ResultValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.ResultsData ResultValue {
            get {
                return this.ResultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultValueField, value) != true)) {
                    this.ResultValueField = value;
                    this.RaisePropertyChanged("ResultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultsData", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class ResultsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.MobileInterface.DataRepositoryService.Result ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.Result Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.Entities")]
    public partial class Result : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AverageReadField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.DeviceCounterBase DeviceCounterField;
        
        private int IdField;
        
        private int IntervalsField;
        
        private System.DateTime LogDateField;
        
        private double MaximumReadField;
        
        private double MinimumReadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageRead {
            get {
                return this.AverageReadField;
            }
            set {
                if ((this.AverageReadField.Equals(value) != true)) {
                    this.AverageReadField = value;
                    this.RaisePropertyChanged("AverageRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceCounterBase DeviceCounter {
            get {
                return this.DeviceCounterField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceCounterField, value) != true)) {
                    this.DeviceCounterField = value;
                    this.RaisePropertyChanged("DeviceCounter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Intervals {
            get {
                return this.IntervalsField;
            }
            set {
                if ((this.IntervalsField.Equals(value) != true)) {
                    this.IntervalsField = value;
                    this.RaisePropertyChanged("Intervals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogDate {
            get {
                return this.LogDateField;
            }
            set {
                if ((this.LogDateField.Equals(value) != true)) {
                    this.LogDateField = value;
                    this.RaisePropertyChanged("LogDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaximumRead {
            get {
                return this.MaximumReadField;
            }
            set {
                if ((this.MaximumReadField.Equals(value) != true)) {
                    this.MaximumReadField = value;
                    this.RaisePropertyChanged("MaximumRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinimumRead {
            get {
                return this.MinimumReadField;
            }
            set {
                if ((this.MinimumReadField.Equals(value) != true)) {
                    this.MinimumReadField = value;
                    this.RaisePropertyChanged("MinimumRead");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCounterBase", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.Entities")]
    public partial class DeviceCounterBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> DeletedField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.Device DeviceField;
        
        private int IdField;
        
        private int LogIntervalField;
        
        private double MaxThresholdField;
        
        private double MinThresholdField;
        
        private int ReadIntervalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.Device Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogInterval {
            get {
                return this.LogIntervalField;
            }
            set {
                if ((this.LogIntervalField.Equals(value) != true)) {
                    this.LogIntervalField = value;
                    this.RaisePropertyChanged("LogInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxThreshold {
            get {
                return this.MaxThresholdField;
            }
            set {
                if ((this.MaxThresholdField.Equals(value) != true)) {
                    this.MaxThresholdField = value;
                    this.RaisePropertyChanged("MaxThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinThreshold {
            get {
                return this.MinThresholdField;
            }
            set {
                if ((this.MinThresholdField.Equals(value) != true)) {
                    this.MinThresholdField = value;
                    this.RaisePropertyChanged("MinThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReadInterval {
            get {
                return this.ReadIntervalField;
            }
            set {
                if ((this.ReadIntervalField.Equals(value) != true)) {
                    this.ReadIntervalField = value;
                    this.RaisePropertyChanged("ReadInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.Entities")]
    public partial class Device : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceCounterBase> CountersField;
        
        private System.Nullable<int> DeletedField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceCounterBase> Counters {
            get {
                return this.CountersField;
            }
            set {
                if ((object.ReferenceEquals(this.CountersField, value) != true)) {
                    this.CountersField = value;
                    this.RaisePropertyChanged("Counters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class DeviceDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.MobileInterface.DataRepositoryService.DeviceCreate deviceCreateField;
        
        private int deviceDeleteField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.DeviceDetails deviceDetailsField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.DeviceEdit deviceEditField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.DeviceList devicelistField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceCreate deviceCreate {
            get {
                return this.deviceCreateField;
            }
            set {
                if ((object.ReferenceEquals(this.deviceCreateField, value) != true)) {
                    this.deviceCreateField = value;
                    this.RaisePropertyChanged("deviceCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int deviceDelete {
            get {
                return this.deviceDeleteField;
            }
            set {
                if ((this.deviceDeleteField.Equals(value) != true)) {
                    this.deviceDeleteField = value;
                    this.RaisePropertyChanged("deviceDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceDetails deviceDetails {
            get {
                return this.deviceDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.deviceDetailsField, value) != true)) {
                    this.deviceDetailsField = value;
                    this.RaisePropertyChanged("deviceDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceEdit deviceEdit {
            get {
                return this.deviceEditField;
            }
            set {
                if ((object.ReferenceEquals(this.deviceEditField, value) != true)) {
                    this.deviceEditField = value;
                    this.RaisePropertyChanged("deviceEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceList devicelist {
            get {
                return this.devicelistField;
            }
            set {
                if ((object.ReferenceEquals(this.devicelistField, value) != true)) {
                    this.devicelistField = value;
                    this.RaisePropertyChanged("devicelist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCreate", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceCreate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DeviceNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceDetails", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string DeviceNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceEdit", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceEdit : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceCounterSummary> CountersField;
        
        private string DeviceNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceCounterSummary> Counters {
            get {
                return this.CountersField;
            }
            set {
                if ((object.ReferenceEquals(this.CountersField, value) != true)) {
                    this.CountersField = value;
                    this.RaisePropertyChanged("Counters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceList", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceDetails> DevicesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceDetails> Devices {
            get {
                return this.DevicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DevicesField, value) != true)) {
                    this.DevicesField = value;
                    this.RaisePropertyChanged("Devices");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCounterSummary", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Devices")]
    public partial class DeviceCounterSummary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterCreate", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class CounterCreate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CounterDefinitifionIdField;
        
        private int DeviceIdField;
        
        private string DeviceNameField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.CounterBase MetricField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterDefinitifionId {
            get {
                return this.CounterDefinitifionIdField;
            }
            set {
                if ((this.CounterDefinitifionIdField.Equals(value) != true)) {
                    this.CounterDefinitifionIdField = value;
                    this.RaisePropertyChanged("CounterDefinitifionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((this.DeviceIdField.Equals(value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterBase Metric {
            get {
                return this.MetricField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricField, value) != true)) {
                    this.MetricField = value;
                    this.RaisePropertyChanged("Metric");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterBase", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class CounterBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int LogIntervalField;
        
        private int MaxThresholdField;
        
        private int MinThresholdField;
        
        private int ReadIntervalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogInterval {
            get {
                return this.LogIntervalField;
            }
            set {
                if ((this.LogIntervalField.Equals(value) != true)) {
                    this.LogIntervalField = value;
                    this.RaisePropertyChanged("LogInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxThreshold {
            get {
                return this.MaxThresholdField;
            }
            set {
                if ((this.MaxThresholdField.Equals(value) != true)) {
                    this.MaxThresholdField = value;
                    this.RaisePropertyChanged("MaxThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinThreshold {
            get {
                return this.MinThresholdField;
            }
            set {
                if ((this.MinThresholdField.Equals(value) != true)) {
                    this.MinThresholdField = value;
                    this.RaisePropertyChanged("MinThreshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReadInterval {
            get {
                return this.ReadIntervalField;
            }
            set {
                if ((this.ReadIntervalField.Equals(value) != true)) {
                    this.ReadIntervalField = value;
                    this.RaisePropertyChanged("ReadInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class CounterDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.CounterComboBox> ComboBoxDataField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.CounterDetails MetricDetailsField;
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.CounterDetails> MetricDetailsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.CounterComboBox> ComboBoxData {
            get {
                return this.ComboBoxDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ComboBoxDataField, value) != true)) {
                    this.ComboBoxDataField = value;
                    this.RaisePropertyChanged("ComboBoxData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterDetails MetricDetails {
            get {
                return this.MetricDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricDetailsField, value) != true)) {
                    this.MetricDetailsField = value;
                    this.RaisePropertyChanged("MetricDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.CounterDetails> MetricDetailsList {
            get {
                return this.MetricDetailsListField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricDetailsListField, value) != true)) {
                    this.MetricDetailsListField = value;
                    this.RaisePropertyChanged("MetricDetailsList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterDetails", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Counters")]
    public partial class CounterDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.MobileInterface.DataRepositoryService.CounterBase CounterField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.DeviceDetails DeviceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterBase Counter {
            get {
                return this.CounterField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterField, value) != true)) {
                    this.CounterField = value;
                    this.RaisePropertyChanged("Counter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceDetails Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterComboBox", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class CounterComboBox : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryField;
        
        private string CounterField;
        
        private string InstanceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Counter {
            get {
                return this.CounterField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterField, value) != true)) {
                    this.CounterField = value;
                    this.RaisePropertyChanged("Counter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceName {
            get {
                return this.InstanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceNameField, value) != true)) {
                    this.InstanceNameField = value;
                    this.RaisePropertyChanged("InstanceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetricDetailsData", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class MetricDetailsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.MobileInterface.DataRepositoryService.CounterDetails MetricDetailsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterDetails MetricDetails {
            get {
                return this.MetricDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricDetailsField, value) != true)) {
                    this.MetricDetailsField = value;
                    this.RaisePropertyChanged("MetricDetails");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService")]
    public partial class GraphDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<MetroMonitor.MobileInterface.DataRepositoryService.GraphCounterDataContract, System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.ResultsDataContract>> PlottingDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<MetroMonitor.MobileInterface.DataRepositoryService.GraphCounterDataContract, System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.ResultsDataContract>> PlottingData {
            get {
                return this.PlottingDataField;
            }
            set {
                if ((object.ReferenceEquals(this.PlottingDataField, value) != true)) {
                    this.PlottingDataField = value;
                    this.RaisePropertyChanged("PlottingData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphCounterDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class GraphCounterDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CounterDescriptionField;
        
        private string InstanceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterDescription {
            get {
                return this.CounterDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterDescriptionField, value) != true)) {
                    this.CounterDescriptionField = value;
                    this.RaisePropertyChanged("CounterDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceName {
            get {
                return this.InstanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceNameField, value) != true)) {
                    this.InstanceNameField = value;
                    this.RaisePropertyChanged("InstanceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultsDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class ResultsDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AverageReadField;
        
        private int IdField;
        
        private int IntervalsField;
        
        private System.DateTime LogDateField;
        
        private double MaximumReadField;
        
        private double MinimumReadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageRead {
            get {
                return this.AverageReadField;
            }
            set {
                if ((this.AverageReadField.Equals(value) != true)) {
                    this.AverageReadField = value;
                    this.RaisePropertyChanged("AverageRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Intervals {
            get {
                return this.IntervalsField;
            }
            set {
                if ((this.IntervalsField.Equals(value) != true)) {
                    this.IntervalsField = value;
                    this.RaisePropertyChanged("Intervals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogDate {
            get {
                return this.LogDateField;
            }
            set {
                if ((this.LogDateField.Equals(value) != true)) {
                    this.LogDateField = value;
                    this.RaisePropertyChanged("LogDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaximumRead {
            get {
                return this.MaximumReadField;
            }
            set {
                if ((this.MaximumReadField.Equals(value) != true)) {
                    this.MaximumReadField = value;
                    this.RaisePropertyChanged("MaximumRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinimumRead {
            get {
                return this.MinimumReadField;
            }
            set {
                if ((this.MinimumReadField.Equals(value) != true)) {
                    this.MinimumReadField = value;
                    this.RaisePropertyChanged("MinimumRead");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticsDataContract", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.WebService.DataMembers")]
    public partial class StatisticsDataContract : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.MobileInterface.DataRepositoryService.StatusDataStatus statusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.StatusDataStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusData.Status", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public enum StatusDataStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceStatusResult", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class DeviceStatusResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DeviceNameField;
        
        private int IdField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.StatusDataStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.StatusDataStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceMetricStatusResult", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class DeviceMetricStatusResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DeviceNameField;
        
        private int IdField;
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.MetricStatusResult> StatisticsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.MetricStatusResult> Statistics {
            get {
                return this.StatisticsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsField, value) != true)) {
                    this.StatisticsField = value;
                    this.RaisePropertyChanged("Statistics");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetricStatusResult", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class MetricStatusResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CounterNameField;
        
        private int IdField;
        
        private System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.MetricTimeFrameResult> TimeFrameResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterName {
            get {
                return this.CounterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterNameField, value) != true)) {
                    this.CounterNameField = value;
                    this.RaisePropertyChanged("CounterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.MetricTimeFrameResult> TimeFrameResult {
            get {
                return this.TimeFrameResultField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeFrameResultField, value) != true)) {
                    this.TimeFrameResultField = value;
                    this.RaisePropertyChanged("TimeFrameResult");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetricTimeFrameResult", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public partial class MetricTimeFrameResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MetroMonitor.MobileInterface.DataRepositoryService.StatusDataStatus StatusField;
        
        private MetroMonitor.MobileInterface.DataRepositoryService.StatusDataTrends TrendField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.StatusDataStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MetroMonitor.MobileInterface.DataRepositoryService.StatusDataTrends Trend {
            get {
                return this.TrendField;
            }
            set {
                if ((this.TrendField.Equals(value) != true)) {
                    this.TrendField = value;
                    this.RaisePropertyChanged("Trend");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusData.Trends", Namespace="http://schemas.datacontract.org/2004/07/MetroMonitor.ViewModels.Results")]
    public enum StatusDataTrends : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Down = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Steady = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Up = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataRepositoryService.IDataRepository")]
    public interface IDataRepository {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataRepository/GetData", ReplyAction="http://tempuri.org/IDataRepository/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataRepository/GetAvailableDevices", ReplyAction="http://tempuri.org/IDataRepository/GetAvailableDevicesResponse")]
        System.IAsyncResult BeginGetAvailableDevices(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetAvailableDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataRepository/GetAvailableCountersForDevice", ReplyAction="http://tempuri.org/IDataRepository/GetAvailableCountersForDeviceResponse")]
        System.IAsyncResult BeginGetAvailableCountersForDevice(int deviceId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetAvailableCountersForDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataRepository/GetResult", ReplyAction="http://tempuri.org/IDataRepository/GetResultResponse")]
        System.IAsyncResult BeginGetResult(System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.CompositeType EndGetResult(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataRepository/GetTestData", ReplyAction="http://tempuri.org/IDataRepository/GetTestDataResponse")]
        System.IAsyncResult BeginGetTestData(System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.CompositeType EndGetTestData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataRepository/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IDataRepository/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(MetroMonitor.MobileInterface.DataRepositoryService.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataRepositoryChannel : MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableCountersForDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableCountersForDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataRepositoryClient : System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository>, MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvailableDevicesDelegate;
        
        private EndOperationDelegate onEndGetAvailableDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvailableCountersForDeviceDelegate;
        
        private EndOperationDelegate onEndGetAvailableCountersForDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableCountersForDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetResultDelegate;
        
        private EndOperationDelegate onEndGetResultDelegate;
        
        private System.Threading.SendOrPostCallback onGetResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestDataDelegate;
        
        private EndOperationDelegate onEndGetTestDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DataRepositoryClient() {
        }
        
        public DataRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<GetAvailableDevicesCompletedEventArgs> GetAvailableDevicesCompleted;
        
        public event System.EventHandler<GetAvailableCountersForDeviceCompletedEventArgs> GetAvailableCountersForDeviceCompleted;
        
        public event System.EventHandler<GetResultCompletedEventArgs> GetResultCompleted;
        
        public event System.EventHandler<GetTestDataCompletedEventArgs> GetTestDataCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.BeginGetAvailableDevices(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableDevices(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.EndGetAvailableDevices(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).BeginGetAvailableDevices(callback, asyncState);
        }
        
        private object[] OnEndGetAvailableDevices(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).EndGetAvailableDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableDevicesCompleted(object state) {
            if ((this.GetAvailableDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableDevicesCompleted(this, new GetAvailableDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableDevicesAsync() {
            this.GetAvailableDevicesAsync(null);
        }
        
        public void GetAvailableDevicesAsync(object userState) {
            if ((this.onBeginGetAvailableDevicesDelegate == null)) {
                this.onBeginGetAvailableDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableDevices);
            }
            if ((this.onEndGetAvailableDevicesDelegate == null)) {
                this.onEndGetAvailableDevicesDelegate = new EndOperationDelegate(this.OnEndGetAvailableDevices);
            }
            if ((this.onGetAvailableDevicesCompletedDelegate == null)) {
                this.onGetAvailableDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableDevicesDelegate, null, this.onEndGetAvailableDevicesDelegate, this.onGetAvailableDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.BeginGetAvailableCountersForDevice(int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableCountersForDevice(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.EndGetAvailableCountersForDevice(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableCountersForDevice(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableCountersForDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).BeginGetAvailableCountersForDevice(deviceId, callback, asyncState);
        }
        
        private object[] OnEndGetAvailableCountersForDevice(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).EndGetAvailableCountersForDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableCountersForDeviceCompleted(object state) {
            if ((this.GetAvailableCountersForDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableCountersForDeviceCompleted(this, new GetAvailableCountersForDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableCountersForDeviceAsync(int deviceId) {
            this.GetAvailableCountersForDeviceAsync(deviceId, null);
        }
        
        public void GetAvailableCountersForDeviceAsync(int deviceId, object userState) {
            if ((this.onBeginGetAvailableCountersForDeviceDelegate == null)) {
                this.onBeginGetAvailableCountersForDeviceDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableCountersForDevice);
            }
            if ((this.onEndGetAvailableCountersForDeviceDelegate == null)) {
                this.onEndGetAvailableCountersForDeviceDelegate = new EndOperationDelegate(this.OnEndGetAvailableCountersForDevice);
            }
            if ((this.onGetAvailableCountersForDeviceCompletedDelegate == null)) {
                this.onGetAvailableCountersForDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableCountersForDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableCountersForDeviceDelegate, new object[] {
                        deviceId}, this.onEndGetAvailableCountersForDeviceDelegate, this.onGetAvailableCountersForDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.BeginGetResult(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetResult(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.CompositeType MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.EndGetResult(System.IAsyncResult result) {
            return base.Channel.EndGetResult(result);
        }
        
        private System.IAsyncResult OnBeginGetResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).BeginGetResult(callback, asyncState);
        }
        
        private object[] OnEndGetResult(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.CompositeType retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).EndGetResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetResultCompleted(object state) {
            if ((this.GetResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetResultCompleted(this, new GetResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetResultAsync() {
            this.GetResultAsync(null);
        }
        
        public void GetResultAsync(object userState) {
            if ((this.onBeginGetResultDelegate == null)) {
                this.onBeginGetResultDelegate = new BeginOperationDelegate(this.OnBeginGetResult);
            }
            if ((this.onEndGetResultDelegate == null)) {
                this.onEndGetResultDelegate = new EndOperationDelegate(this.OnEndGetResult);
            }
            if ((this.onGetResultCompletedDelegate == null)) {
                this.onGetResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetResultCompleted);
            }
            base.InvokeAsync(this.onBeginGetResultDelegate, null, this.onEndGetResultDelegate, this.onGetResultCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.BeginGetTestData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.CompositeType MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.EndGetTestData(System.IAsyncResult result) {
            return base.Channel.EndGetTestData(result);
        }
        
        private System.IAsyncResult OnBeginGetTestData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).BeginGetTestData(callback, asyncState);
        }
        
        private object[] OnEndGetTestData(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.CompositeType retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).EndGetTestData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestDataCompleted(object state) {
            if ((this.GetTestDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestDataCompleted(this, new GetTestDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestDataAsync() {
            this.GetTestDataAsync(null);
        }
        
        public void GetTestDataAsync(object userState) {
            if ((this.onBeginGetTestDataDelegate == null)) {
                this.onBeginGetTestDataDelegate = new BeginOperationDelegate(this.OnBeginGetTestData);
            }
            if ((this.onEndGetTestDataDelegate == null)) {
                this.onEndGetTestDataDelegate = new EndOperationDelegate(this.OnEndGetTestData);
            }
            if ((this.onGetTestDataCompletedDelegate == null)) {
                this.onGetTestDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestDataDelegate, null, this.onEndGetTestDataDelegate, this.onGetTestDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.BeginGetDataUsingDataContract(MetroMonitor.MobileInterface.DataRepositoryService.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.CompositeType MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository.EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroMonitor.MobileInterface.DataRepositoryService.CompositeType composite = ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.CompositeType retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository)(this)).EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(MetroMonitor.MobileInterface.DataRepositoryService.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(MetroMonitor.MobileInterface.DataRepositoryService.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository CreateChannel() {
            return new DataRepositoryClientChannel(this);
        }
        
        private class DataRepositoryClientChannel : ChannelBase<MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository>, MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository {
            
            public DataRepositoryClientChannel(System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IDataRepository> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("GetData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAvailableDevices(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAvailableDevices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetAvailableDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetAvailableDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAvailableCountersForDevice(int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("GetAvailableCountersForDevice", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetAvailableCountersForDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetAvailableCountersForDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetResult(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetResult", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.CompositeType EndGetResult(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.CompositeType _result = ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(base.EndInvoke("GetResult", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTestData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTestData", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.CompositeType EndGetTestData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.CompositeType _result = ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(base.EndInvoke("GetTestData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataUsingDataContract(MetroMonitor.MobileInterface.DataRepositoryService.CompositeType composite, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = composite;
                System.IAsyncResult _result = base.BeginInvoke("GetDataUsingDataContract", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.CompositeType _result = ((MetroMonitor.MobileInterface.DataRepositoryService.CompositeType)(base.EndInvoke("GetDataUsingDataContract", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataRepositoryService.IDeviceContracts")]
    public interface IDeviceContracts {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDeviceContracts/AddDevice", ReplyAction="http://tempuri.org/IDeviceContracts/AddDeviceResponse")]
        System.IAsyncResult BeginAddDevice(string device, System.AsyncCallback callback, object asyncState);
        
        bool EndAddDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDeviceContracts/DeleteDevice", ReplyAction="http://tempuri.org/IDeviceContracts/DeleteDeviceResponse")]
        System.IAsyncResult BeginDeleteDevice(int deviceId, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDeviceContracts/EditDevice", ReplyAction="http://tempuri.org/IDeviceContracts/EditDeviceResponse")]
        System.IAsyncResult BeginEditDevice(string deviceName, int Id, System.AsyncCallback callback, object asyncState);
        
        bool EndEditDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDeviceContracts/DeviceDetails", ReplyAction="http://tempuri.org/IDeviceContracts/DeviceDetailsResponse")]
        System.IAsyncResult BeginDeviceDetails(int DeviceId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract EndDeviceDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDeviceContracts/LoadDeviceList", ReplyAction="http://tempuri.org/IDeviceContracts/LoadDeviceListResponse")]
        System.IAsyncResult BeginLoadDeviceList(System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract EndLoadDeviceList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeviceContractsChannel : MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeviceDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeviceDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeviceContractsClient : System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts>, MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts {
        
        private BeginOperationDelegate onBeginAddDeviceDelegate;
        
        private EndOperationDelegate onEndAddDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onAddDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDeviceDelegate;
        
        private EndOperationDelegate onEndDeleteDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditDeviceDelegate;
        
        private EndOperationDelegate onEndEditDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onEditDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeviceDetailsDelegate;
        
        private EndOperationDelegate onEndDeviceDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onDeviceDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadDeviceListDelegate;
        
        private EndOperationDelegate onEndLoadDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onLoadDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DeviceContractsClient() {
        }
        
        public DeviceContractsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeviceContractsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceContractsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceContractsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddDeviceCompletedEventArgs> AddDeviceCompleted;
        
        public event System.EventHandler<DeleteDeviceCompletedEventArgs> DeleteDeviceCompleted;
        
        public event System.EventHandler<EditDeviceCompletedEventArgs> EditDeviceCompleted;
        
        public event System.EventHandler<DeviceDetailsCompletedEventArgs> DeviceDetailsCompleted;
        
        public event System.EventHandler<LoadDeviceListCompletedEventArgs> LoadDeviceListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.BeginAddDevice(string device, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDevice(device, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.EndAddDevice(System.IAsyncResult result) {
            return base.Channel.EndAddDevice(result);
        }
        
        private System.IAsyncResult OnBeginAddDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string device = ((string)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).BeginAddDevice(device, callback, asyncState);
        }
        
        private object[] OnEndAddDevice(System.IAsyncResult result) {
            bool retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).EndAddDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddDeviceCompleted(object state) {
            if ((this.AddDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDeviceCompleted(this, new AddDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDeviceAsync(string device) {
            this.AddDeviceAsync(device, null);
        }
        
        public void AddDeviceAsync(string device, object userState) {
            if ((this.onBeginAddDeviceDelegate == null)) {
                this.onBeginAddDeviceDelegate = new BeginOperationDelegate(this.OnBeginAddDevice);
            }
            if ((this.onEndAddDeviceDelegate == null)) {
                this.onEndAddDeviceDelegate = new EndOperationDelegate(this.OnEndAddDevice);
            }
            if ((this.onAddDeviceCompletedDelegate == null)) {
                this.onAddDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginAddDeviceDelegate, new object[] {
                        device}, this.onEndAddDeviceDelegate, this.onAddDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.BeginDeleteDevice(int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDevice(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.EndDeleteDevice(System.IAsyncResult result) {
            return base.Channel.EndDeleteDevice(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).BeginDeleteDevice(deviceId, callback, asyncState);
        }
        
        private object[] OnEndDeleteDevice(System.IAsyncResult result) {
            bool retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).EndDeleteDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteDeviceCompleted(object state) {
            if ((this.DeleteDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDeviceCompleted(this, new DeleteDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDeviceAsync(int deviceId) {
            this.DeleteDeviceAsync(deviceId, null);
        }
        
        public void DeleteDeviceAsync(int deviceId, object userState) {
            if ((this.onBeginDeleteDeviceDelegate == null)) {
                this.onBeginDeleteDeviceDelegate = new BeginOperationDelegate(this.OnBeginDeleteDevice);
            }
            if ((this.onEndDeleteDeviceDelegate == null)) {
                this.onEndDeleteDeviceDelegate = new EndOperationDelegate(this.OnEndDeleteDevice);
            }
            if ((this.onDeleteDeviceCompletedDelegate == null)) {
                this.onDeleteDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDeviceDelegate, new object[] {
                        deviceId}, this.onEndDeleteDeviceDelegate, this.onDeleteDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.BeginEditDevice(string deviceName, int Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditDevice(deviceName, Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.EndEditDevice(System.IAsyncResult result) {
            return base.Channel.EndEditDevice(result);
        }
        
        private System.IAsyncResult OnBeginEditDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceName = ((string)(inValues[0]));
            int Id = ((int)(inValues[1]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).BeginEditDevice(deviceName, Id, callback, asyncState);
        }
        
        private object[] OnEndEditDevice(System.IAsyncResult result) {
            bool retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).EndEditDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditDeviceCompleted(object state) {
            if ((this.EditDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditDeviceCompleted(this, new EditDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditDeviceAsync(string deviceName, int Id) {
            this.EditDeviceAsync(deviceName, Id, null);
        }
        
        public void EditDeviceAsync(string deviceName, int Id, object userState) {
            if ((this.onBeginEditDeviceDelegate == null)) {
                this.onBeginEditDeviceDelegate = new BeginOperationDelegate(this.OnBeginEditDevice);
            }
            if ((this.onEndEditDeviceDelegate == null)) {
                this.onEndEditDeviceDelegate = new EndOperationDelegate(this.OnEndEditDevice);
            }
            if ((this.onEditDeviceCompletedDelegate == null)) {
                this.onEditDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginEditDeviceDelegate, new object[] {
                        deviceName,
                        Id}, this.onEndEditDeviceDelegate, this.onEditDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.BeginDeviceDetails(int DeviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeviceDetails(DeviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.EndDeviceDetails(System.IAsyncResult result) {
            return base.Channel.EndDeviceDetails(result);
        }
        
        private System.IAsyncResult OnBeginDeviceDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int DeviceId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).BeginDeviceDetails(DeviceId, callback, asyncState);
        }
        
        private object[] OnEndDeviceDetails(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).EndDeviceDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeviceDetailsCompleted(object state) {
            if ((this.DeviceDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeviceDetailsCompleted(this, new DeviceDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeviceDetailsAsync(int DeviceId) {
            this.DeviceDetailsAsync(DeviceId, null);
        }
        
        public void DeviceDetailsAsync(int DeviceId, object userState) {
            if ((this.onBeginDeviceDetailsDelegate == null)) {
                this.onBeginDeviceDetailsDelegate = new BeginOperationDelegate(this.OnBeginDeviceDetails);
            }
            if ((this.onEndDeviceDetailsDelegate == null)) {
                this.onEndDeviceDetailsDelegate = new EndOperationDelegate(this.OnEndDeviceDetails);
            }
            if ((this.onDeviceDetailsCompletedDelegate == null)) {
                this.onDeviceDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeviceDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginDeviceDetailsDelegate, new object[] {
                        DeviceId}, this.onEndDeviceDetailsDelegate, this.onDeviceDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.BeginLoadDeviceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadDeviceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts.EndLoadDeviceList(System.IAsyncResult result) {
            return base.Channel.EndLoadDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginLoadDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).BeginLoadDeviceList(callback, asyncState);
        }
        
        private object[] OnEndLoadDeviceList(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts)(this)).EndLoadDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadDeviceListCompleted(object state) {
            if ((this.LoadDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadDeviceListCompleted(this, new LoadDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadDeviceListAsync() {
            this.LoadDeviceListAsync(null);
        }
        
        public void LoadDeviceListAsync(object userState) {
            if ((this.onBeginLoadDeviceListDelegate == null)) {
                this.onBeginLoadDeviceListDelegate = new BeginOperationDelegate(this.OnBeginLoadDeviceList);
            }
            if ((this.onEndLoadDeviceListDelegate == null)) {
                this.onEndLoadDeviceListDelegate = new EndOperationDelegate(this.OnEndLoadDeviceList);
            }
            if ((this.onLoadDeviceListCompletedDelegate == null)) {
                this.onLoadDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginLoadDeviceListDelegate, null, this.onEndLoadDeviceListDelegate, this.onLoadDeviceListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts CreateChannel() {
            return new DeviceContractsClientChannel(this);
        }
        
        private class DeviceContractsClientChannel : ChannelBase<MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts>, MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts {
            
            public DeviceContractsClientChannel(System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IDeviceContracts> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddDevice(string device, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = device;
                System.IAsyncResult _result = base.BeginInvoke("AddDevice", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteDevice(int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDevice", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditDevice(string deviceName, int Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = deviceName;
                _args[1] = Id;
                System.IAsyncResult _result = base.BeginInvoke("EditDevice", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeviceDetails(int DeviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = DeviceId;
                System.IAsyncResult _result = base.BeginInvoke("DeviceDetails", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract EndDeviceDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract)(base.EndInvoke("DeviceDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadDeviceList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract EndLoadDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.DeviceDataContract)(base.EndInvoke("LoadDeviceList", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataRepositoryService.ICounterContracts")]
    public interface ICounterContracts {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/AddMetric", ReplyAction="http://tempuri.org/ICounterContracts/AddMetricResponse")]
        System.IAsyncResult BeginAddMetric(MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate counter, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMetric(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/DeleteMetric", ReplyAction="http://tempuri.org/ICounterContracts/DeleteMetricResponse")]
        System.IAsyncResult BeginDeleteMetric(int id, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteMetric(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/EditMetric", ReplyAction="http://tempuri.org/ICounterContracts/EditMetricResponse")]
        System.IAsyncResult BeginEditMetric(int counterID, int read, int log, int min, int max, System.AsyncCallback callback, object asyncState);
        
        bool EndEditMetric(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/LoadAvailableCounters", ReplyAction="http://tempuri.org/ICounterContracts/LoadAvailableCountersResponse")]
        System.IAsyncResult BeginLoadAvailableCounters(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndLoadAvailableCounters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/MetricDetails", ReplyAction="http://tempuri.org/ICounterContracts/MetricDetailsResponse")]
        System.IAsyncResult BeginMetricDetails(int counterId, int deviceId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract EndMetricDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/GetMetricDetails", ReplyAction="http://tempuri.org/ICounterContracts/GetMetricDetailsResponse")]
        System.IAsyncResult BeginGetMetricDetails(int counterId, int deviceId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData EndGetMetricDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/LoadMetricList", ReplyAction="http://tempuri.org/ICounterContracts/LoadMetricListResponse")]
        System.IAsyncResult BeginLoadMetricList(int deviceId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract EndLoadMetricList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICounterContracts/ComboBoxCounterData", ReplyAction="http://tempuri.org/ICounterContracts/ComboBoxCounterDataResponse")]
        System.IAsyncResult BeginComboBoxCounterData(System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract EndComboBoxCounterData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICounterContractsChannel : MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMetricCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMetricCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteMetricCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteMetricCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditMetricCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditMetricCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadAvailableCountersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadAvailableCountersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MetricDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MetricDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMetricDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMetricDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadMetricListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadMetricListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComboBoxCounterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ComboBoxCounterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CounterContractsClient : System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts>, MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts {
        
        private BeginOperationDelegate onBeginAddMetricDelegate;
        
        private EndOperationDelegate onEndAddMetricDelegate;
        
        private System.Threading.SendOrPostCallback onAddMetricCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMetricDelegate;
        
        private EndOperationDelegate onEndDeleteMetricDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMetricCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditMetricDelegate;
        
        private EndOperationDelegate onEndEditMetricDelegate;
        
        private System.Threading.SendOrPostCallback onEditMetricCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadAvailableCountersDelegate;
        
        private EndOperationDelegate onEndLoadAvailableCountersDelegate;
        
        private System.Threading.SendOrPostCallback onLoadAvailableCountersCompletedDelegate;
        
        private BeginOperationDelegate onBeginMetricDetailsDelegate;
        
        private EndOperationDelegate onEndMetricDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onMetricDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMetricDetailsDelegate;
        
        private EndOperationDelegate onEndGetMetricDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMetricDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadMetricListDelegate;
        
        private EndOperationDelegate onEndLoadMetricListDelegate;
        
        private System.Threading.SendOrPostCallback onLoadMetricListCompletedDelegate;
        
        private BeginOperationDelegate onBeginComboBoxCounterDataDelegate;
        
        private EndOperationDelegate onEndComboBoxCounterDataDelegate;
        
        private System.Threading.SendOrPostCallback onComboBoxCounterDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CounterContractsClient() {
        }
        
        public CounterContractsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CounterContractsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CounterContractsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CounterContractsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddMetricCompletedEventArgs> AddMetricCompleted;
        
        public event System.EventHandler<DeleteMetricCompletedEventArgs> DeleteMetricCompleted;
        
        public event System.EventHandler<EditMetricCompletedEventArgs> EditMetricCompleted;
        
        public event System.EventHandler<LoadAvailableCountersCompletedEventArgs> LoadAvailableCountersCompleted;
        
        public event System.EventHandler<MetricDetailsCompletedEventArgs> MetricDetailsCompleted;
        
        public event System.EventHandler<GetMetricDetailsCompletedEventArgs> GetMetricDetailsCompleted;
        
        public event System.EventHandler<LoadMetricListCompletedEventArgs> LoadMetricListCompleted;
        
        public event System.EventHandler<ComboBoxCounterDataCompletedEventArgs> ComboBoxCounterDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginAddMetric(MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate counter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMetric(counter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndAddMetric(System.IAsyncResult result) {
            return base.Channel.EndAddMetric(result);
        }
        
        private System.IAsyncResult OnBeginAddMetric(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate counter = ((MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginAddMetric(counter, callback, asyncState);
        }
        
        private object[] OnEndAddMetric(System.IAsyncResult result) {
            bool retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndAddMetric(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMetricCompleted(object state) {
            if ((this.AddMetricCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMetricCompleted(this, new AddMetricCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMetricAsync(MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate counter) {
            this.AddMetricAsync(counter, null);
        }
        
        public void AddMetricAsync(MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate counter, object userState) {
            if ((this.onBeginAddMetricDelegate == null)) {
                this.onBeginAddMetricDelegate = new BeginOperationDelegate(this.OnBeginAddMetric);
            }
            if ((this.onEndAddMetricDelegate == null)) {
                this.onEndAddMetricDelegate = new EndOperationDelegate(this.OnEndAddMetric);
            }
            if ((this.onAddMetricCompletedDelegate == null)) {
                this.onAddMetricCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMetricCompleted);
            }
            base.InvokeAsync(this.onBeginAddMetricDelegate, new object[] {
                        counter}, this.onEndAddMetricDelegate, this.onAddMetricCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginDeleteMetric(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMetric(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndDeleteMetric(System.IAsyncResult result) {
            return base.Channel.EndDeleteMetric(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMetric(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginDeleteMetric(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteMetric(System.IAsyncResult result) {
            bool retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndDeleteMetric(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteMetricCompleted(object state) {
            if ((this.DeleteMetricCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMetricCompleted(this, new DeleteMetricCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMetricAsync(int id) {
            this.DeleteMetricAsync(id, null);
        }
        
        public void DeleteMetricAsync(int id, object userState) {
            if ((this.onBeginDeleteMetricDelegate == null)) {
                this.onBeginDeleteMetricDelegate = new BeginOperationDelegate(this.OnBeginDeleteMetric);
            }
            if ((this.onEndDeleteMetricDelegate == null)) {
                this.onEndDeleteMetricDelegate = new EndOperationDelegate(this.OnEndDeleteMetric);
            }
            if ((this.onDeleteMetricCompletedDelegate == null)) {
                this.onDeleteMetricCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMetricCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMetricDelegate, new object[] {
                        id}, this.onEndDeleteMetricDelegate, this.onDeleteMetricCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginEditMetric(int counterID, int read, int log, int min, int max, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditMetric(counterID, read, log, min, max, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndEditMetric(System.IAsyncResult result) {
            return base.Channel.EndEditMetric(result);
        }
        
        private System.IAsyncResult OnBeginEditMetric(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int counterID = ((int)(inValues[0]));
            int read = ((int)(inValues[1]));
            int log = ((int)(inValues[2]));
            int min = ((int)(inValues[3]));
            int max = ((int)(inValues[4]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginEditMetric(counterID, read, log, min, max, callback, asyncState);
        }
        
        private object[] OnEndEditMetric(System.IAsyncResult result) {
            bool retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndEditMetric(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditMetricCompleted(object state) {
            if ((this.EditMetricCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditMetricCompleted(this, new EditMetricCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditMetricAsync(int counterID, int read, int log, int min, int max) {
            this.EditMetricAsync(counterID, read, log, min, max, null);
        }
        
        public void EditMetricAsync(int counterID, int read, int log, int min, int max, object userState) {
            if ((this.onBeginEditMetricDelegate == null)) {
                this.onBeginEditMetricDelegate = new BeginOperationDelegate(this.OnBeginEditMetric);
            }
            if ((this.onEndEditMetricDelegate == null)) {
                this.onEndEditMetricDelegate = new EndOperationDelegate(this.OnEndEditMetric);
            }
            if ((this.onEditMetricCompletedDelegate == null)) {
                this.onEditMetricCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditMetricCompleted);
            }
            base.InvokeAsync(this.onBeginEditMetricDelegate, new object[] {
                        counterID,
                        read,
                        log,
                        min,
                        max}, this.onEndEditMetricDelegate, this.onEditMetricCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginLoadAvailableCounters(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadAvailableCounters(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndLoadAvailableCounters(System.IAsyncResult result) {
            return base.Channel.EndLoadAvailableCounters(result);
        }
        
        private System.IAsyncResult OnBeginLoadAvailableCounters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginLoadAvailableCounters(callback, asyncState);
        }
        
        private object[] OnEndLoadAvailableCounters(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndLoadAvailableCounters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadAvailableCountersCompleted(object state) {
            if ((this.LoadAvailableCountersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadAvailableCountersCompleted(this, new LoadAvailableCountersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadAvailableCountersAsync() {
            this.LoadAvailableCountersAsync(null);
        }
        
        public void LoadAvailableCountersAsync(object userState) {
            if ((this.onBeginLoadAvailableCountersDelegate == null)) {
                this.onBeginLoadAvailableCountersDelegate = new BeginOperationDelegate(this.OnBeginLoadAvailableCounters);
            }
            if ((this.onEndLoadAvailableCountersDelegate == null)) {
                this.onEndLoadAvailableCountersDelegate = new EndOperationDelegate(this.OnEndLoadAvailableCounters);
            }
            if ((this.onLoadAvailableCountersCompletedDelegate == null)) {
                this.onLoadAvailableCountersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadAvailableCountersCompleted);
            }
            base.InvokeAsync(this.onBeginLoadAvailableCountersDelegate, null, this.onEndLoadAvailableCountersDelegate, this.onLoadAvailableCountersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginMetricDetails(int counterId, int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMetricDetails(counterId, deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndMetricDetails(System.IAsyncResult result) {
            return base.Channel.EndMetricDetails(result);
        }
        
        private System.IAsyncResult OnBeginMetricDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int counterId = ((int)(inValues[0]));
            int deviceId = ((int)(inValues[1]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginMetricDetails(counterId, deviceId, callback, asyncState);
        }
        
        private object[] OnEndMetricDetails(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndMetricDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMetricDetailsCompleted(object state) {
            if ((this.MetricDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MetricDetailsCompleted(this, new MetricDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MetricDetailsAsync(int counterId, int deviceId) {
            this.MetricDetailsAsync(counterId, deviceId, null);
        }
        
        public void MetricDetailsAsync(int counterId, int deviceId, object userState) {
            if ((this.onBeginMetricDetailsDelegate == null)) {
                this.onBeginMetricDetailsDelegate = new BeginOperationDelegate(this.OnBeginMetricDetails);
            }
            if ((this.onEndMetricDetailsDelegate == null)) {
                this.onEndMetricDetailsDelegate = new EndOperationDelegate(this.OnEndMetricDetails);
            }
            if ((this.onMetricDetailsCompletedDelegate == null)) {
                this.onMetricDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMetricDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginMetricDetailsDelegate, new object[] {
                        counterId,
                        deviceId}, this.onEndMetricDetailsDelegate, this.onMetricDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginGetMetricDetails(int counterId, int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMetricDetails(counterId, deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndGetMetricDetails(System.IAsyncResult result) {
            return base.Channel.EndGetMetricDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetMetricDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int counterId = ((int)(inValues[0]));
            int deviceId = ((int)(inValues[1]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginGetMetricDetails(counterId, deviceId, callback, asyncState);
        }
        
        private object[] OnEndGetMetricDetails(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndGetMetricDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMetricDetailsCompleted(object state) {
            if ((this.GetMetricDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMetricDetailsCompleted(this, new GetMetricDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMetricDetailsAsync(int counterId, int deviceId) {
            this.GetMetricDetailsAsync(counterId, deviceId, null);
        }
        
        public void GetMetricDetailsAsync(int counterId, int deviceId, object userState) {
            if ((this.onBeginGetMetricDetailsDelegate == null)) {
                this.onBeginGetMetricDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetMetricDetails);
            }
            if ((this.onEndGetMetricDetailsDelegate == null)) {
                this.onEndGetMetricDetailsDelegate = new EndOperationDelegate(this.OnEndGetMetricDetails);
            }
            if ((this.onGetMetricDetailsCompletedDelegate == null)) {
                this.onGetMetricDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMetricDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMetricDetailsDelegate, new object[] {
                        counterId,
                        deviceId}, this.onEndGetMetricDetailsDelegate, this.onGetMetricDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginLoadMetricList(int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadMetricList(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndLoadMetricList(System.IAsyncResult result) {
            return base.Channel.EndLoadMetricList(result);
        }
        
        private System.IAsyncResult OnBeginLoadMetricList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginLoadMetricList(deviceId, callback, asyncState);
        }
        
        private object[] OnEndLoadMetricList(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndLoadMetricList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadMetricListCompleted(object state) {
            if ((this.LoadMetricListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadMetricListCompleted(this, new LoadMetricListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadMetricListAsync(int deviceId) {
            this.LoadMetricListAsync(deviceId, null);
        }
        
        public void LoadMetricListAsync(int deviceId, object userState) {
            if ((this.onBeginLoadMetricListDelegate == null)) {
                this.onBeginLoadMetricListDelegate = new BeginOperationDelegate(this.OnBeginLoadMetricList);
            }
            if ((this.onEndLoadMetricListDelegate == null)) {
                this.onEndLoadMetricListDelegate = new EndOperationDelegate(this.OnEndLoadMetricList);
            }
            if ((this.onLoadMetricListCompletedDelegate == null)) {
                this.onLoadMetricListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadMetricListCompleted);
            }
            base.InvokeAsync(this.onBeginLoadMetricListDelegate, new object[] {
                        deviceId}, this.onEndLoadMetricListDelegate, this.onLoadMetricListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.BeginComboBoxCounterData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComboBoxCounterData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts.EndComboBoxCounterData(System.IAsyncResult result) {
            return base.Channel.EndComboBoxCounterData(result);
        }
        
        private System.IAsyncResult OnBeginComboBoxCounterData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).BeginComboBoxCounterData(callback, asyncState);
        }
        
        private object[] OnEndComboBoxCounterData(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts)(this)).EndComboBoxCounterData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnComboBoxCounterDataCompleted(object state) {
            if ((this.ComboBoxCounterDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ComboBoxCounterDataCompleted(this, new ComboBoxCounterDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ComboBoxCounterDataAsync() {
            this.ComboBoxCounterDataAsync(null);
        }
        
        public void ComboBoxCounterDataAsync(object userState) {
            if ((this.onBeginComboBoxCounterDataDelegate == null)) {
                this.onBeginComboBoxCounterDataDelegate = new BeginOperationDelegate(this.OnBeginComboBoxCounterData);
            }
            if ((this.onEndComboBoxCounterDataDelegate == null)) {
                this.onEndComboBoxCounterDataDelegate = new EndOperationDelegate(this.OnEndComboBoxCounterData);
            }
            if ((this.onComboBoxCounterDataCompletedDelegate == null)) {
                this.onComboBoxCounterDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComboBoxCounterDataCompleted);
            }
            base.InvokeAsync(this.onBeginComboBoxCounterDataDelegate, null, this.onEndComboBoxCounterDataDelegate, this.onComboBoxCounterDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts CreateChannel() {
            return new CounterContractsClientChannel(this);
        }
        
        private class CounterContractsClientChannel : ChannelBase<MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts>, MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts {
            
            public CounterContractsClientChannel(System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.ICounterContracts> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddMetric(MetroMonitor.MobileInterface.DataRepositoryService.CounterCreate counter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = counter;
                System.IAsyncResult _result = base.BeginInvoke("AddMetric", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMetric(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMetric", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteMetric(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteMetric", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteMetric(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteMetric", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditMetric(int counterID, int read, int log, int min, int max, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = counterID;
                _args[1] = read;
                _args[2] = log;
                _args[3] = min;
                _args[4] = max;
                System.IAsyncResult _result = base.BeginInvoke("EditMetric", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditMetric(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditMetric", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadAvailableCounters(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadAvailableCounters", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndLoadAvailableCounters(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("LoadAvailableCounters", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMetricDetails(int counterId, int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = counterId;
                _args[1] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("MetricDetails", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract EndMetricDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract)(base.EndInvoke("MetricDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMetricDetails(int counterId, int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = counterId;
                _args[1] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("GetMetricDetails", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData EndGetMetricDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData _result = ((MetroMonitor.MobileInterface.DataRepositoryService.MetricDetailsData)(base.EndInvoke("GetMetricDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadMetricList(int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("LoadMetricList", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract EndLoadMetricList(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract)(base.EndInvoke("LoadMetricList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginComboBoxCounterData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ComboBoxCounterData", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract EndComboBoxCounterData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.CounterDataContract)(base.EndInvoke("ComboBoxCounterData", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataRepositoryService.IGraphContract")]
    public interface IGraphContract {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGraphContract/MetricsOverveiwForDevice", ReplyAction="http://tempuri.org/IGraphContract/MetricsOverveiwForDeviceResponse")]
        System.IAsyncResult BeginMetricsOverveiwForDevice(int deviceId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract EndMetricsOverveiwForDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGraphContract/GetResultsSet", ReplyAction="http://tempuri.org/IGraphContract/GetResultsSetResponse")]
        System.IAsyncResult BeginGetResultsSet(int deviceId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract EndGetResultsSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGraphContract/TestService", ReplyAction="http://tempuri.org/IGraphContract/TestServiceResponse")]
        System.IAsyncResult BeginTestService(System.AsyncCallback callback, object asyncState);
        
        int EndTestService(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGraphContractChannel : MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MetricsOverveiwForDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MetricsOverveiwForDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetResultsSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetResultsSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GraphContractClient : System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract>, MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract {
        
        private BeginOperationDelegate onBeginMetricsOverveiwForDeviceDelegate;
        
        private EndOperationDelegate onEndMetricsOverveiwForDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onMetricsOverveiwForDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetResultsSetDelegate;
        
        private EndOperationDelegate onEndGetResultsSetDelegate;
        
        private System.Threading.SendOrPostCallback onGetResultsSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestServiceDelegate;
        
        private EndOperationDelegate onEndTestServiceDelegate;
        
        private System.Threading.SendOrPostCallback onTestServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GraphContractClient() {
        }
        
        public GraphContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GraphContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GraphContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GraphContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<MetricsOverveiwForDeviceCompletedEventArgs> MetricsOverveiwForDeviceCompleted;
        
        public event System.EventHandler<GetResultsSetCompletedEventArgs> GetResultsSetCompleted;
        
        public event System.EventHandler<TestServiceCompletedEventArgs> TestServiceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract.BeginMetricsOverveiwForDevice(int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMetricsOverveiwForDevice(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract.EndMetricsOverveiwForDevice(System.IAsyncResult result) {
            return base.Channel.EndMetricsOverveiwForDevice(result);
        }
        
        private System.IAsyncResult OnBeginMetricsOverveiwForDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract)(this)).BeginMetricsOverveiwForDevice(deviceId, callback, asyncState);
        }
        
        private object[] OnEndMetricsOverveiwForDevice(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract)(this)).EndMetricsOverveiwForDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMetricsOverveiwForDeviceCompleted(object state) {
            if ((this.MetricsOverveiwForDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MetricsOverveiwForDeviceCompleted(this, new MetricsOverveiwForDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MetricsOverveiwForDeviceAsync(int deviceId) {
            this.MetricsOverveiwForDeviceAsync(deviceId, null);
        }
        
        public void MetricsOverveiwForDeviceAsync(int deviceId, object userState) {
            if ((this.onBeginMetricsOverveiwForDeviceDelegate == null)) {
                this.onBeginMetricsOverveiwForDeviceDelegate = new BeginOperationDelegate(this.OnBeginMetricsOverveiwForDevice);
            }
            if ((this.onEndMetricsOverveiwForDeviceDelegate == null)) {
                this.onEndMetricsOverveiwForDeviceDelegate = new EndOperationDelegate(this.OnEndMetricsOverveiwForDevice);
            }
            if ((this.onMetricsOverveiwForDeviceCompletedDelegate == null)) {
                this.onMetricsOverveiwForDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMetricsOverveiwForDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginMetricsOverveiwForDeviceDelegate, new object[] {
                        deviceId}, this.onEndMetricsOverveiwForDeviceDelegate, this.onMetricsOverveiwForDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract.BeginGetResultsSet(int deviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetResultsSet(deviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract.EndGetResultsSet(System.IAsyncResult result) {
            return base.Channel.EndGetResultsSet(result);
        }
        
        private System.IAsyncResult OnBeginGetResultsSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract)(this)).BeginGetResultsSet(deviceId, callback, asyncState);
        }
        
        private object[] OnEndGetResultsSet(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract)(this)).EndGetResultsSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetResultsSetCompleted(object state) {
            if ((this.GetResultsSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetResultsSetCompleted(this, new GetResultsSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetResultsSetAsync(int deviceId) {
            this.GetResultsSetAsync(deviceId, null);
        }
        
        public void GetResultsSetAsync(int deviceId, object userState) {
            if ((this.onBeginGetResultsSetDelegate == null)) {
                this.onBeginGetResultsSetDelegate = new BeginOperationDelegate(this.OnBeginGetResultsSet);
            }
            if ((this.onEndGetResultsSetDelegate == null)) {
                this.onEndGetResultsSetDelegate = new EndOperationDelegate(this.OnEndGetResultsSet);
            }
            if ((this.onGetResultsSetCompletedDelegate == null)) {
                this.onGetResultsSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetResultsSetCompleted);
            }
            base.InvokeAsync(this.onBeginGetResultsSetDelegate, new object[] {
                        deviceId}, this.onEndGetResultsSetDelegate, this.onGetResultsSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract.BeginTestService(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestService(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract.EndTestService(System.IAsyncResult result) {
            return base.Channel.EndTestService(result);
        }
        
        private System.IAsyncResult OnBeginTestService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract)(this)).BeginTestService(callback, asyncState);
        }
        
        private object[] OnEndTestService(System.IAsyncResult result) {
            int retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract)(this)).EndTestService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestServiceCompleted(object state) {
            if ((this.TestServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestServiceCompleted(this, new TestServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestServiceAsync() {
            this.TestServiceAsync(null);
        }
        
        public void TestServiceAsync(object userState) {
            if ((this.onBeginTestServiceDelegate == null)) {
                this.onBeginTestServiceDelegate = new BeginOperationDelegate(this.OnBeginTestService);
            }
            if ((this.onEndTestServiceDelegate == null)) {
                this.onEndTestServiceDelegate = new EndOperationDelegate(this.OnEndTestService);
            }
            if ((this.onTestServiceCompletedDelegate == null)) {
                this.onTestServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestServiceCompleted);
            }
            base.InvokeAsync(this.onBeginTestServiceDelegate, null, this.onEndTestServiceDelegate, this.onTestServiceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract CreateChannel() {
            return new GraphContractClientChannel(this);
        }
        
        private class GraphContractClientChannel : ChannelBase<MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract>, MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract {
            
            public GraphContractClientChannel(System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IGraphContract> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginMetricsOverveiwForDevice(int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("MetricsOverveiwForDevice", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract EndMetricsOverveiwForDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract)(base.EndInvoke("MetricsOverveiwForDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetResultsSet(int deviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceId;
                System.IAsyncResult _result = base.BeginInvoke("GetResultsSet", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract EndGetResultsSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.GraphDataContract)(base.EndInvoke("GetResultsSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTestService(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TestService", _args, callback, asyncState);
                return _result;
            }
            
            public int EndTestService(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("TestService", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataRepositoryService.IStatisticsContract")]
    public interface IStatisticsContract {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStatisticsContract/GetCurrentStatus", ReplyAction="http://tempuri.org/IStatisticsContract/GetCurrentStatusResponse")]
        System.IAsyncResult BeginGetCurrentStatus(int counterId, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract EndGetCurrentStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStatisticsContract/GetStatusesForAllDevices", ReplyAction="http://tempuri.org/IStatisticsContract/GetStatusesForAllDevicesResponse")]
        System.IAsyncResult BeginGetStatusesForAllDevices(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult> EndGetStatusesForAllDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStatisticsContract/GetCounterSummaryStatus", ReplyAction="http://tempuri.org/IStatisticsContract/GetCounterSummaryStatusResponse")]
        System.IAsyncResult BeginGetCounterSummaryStatus(int id, System.AsyncCallback callback, object asyncState);
        
        MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult EndGetCounterSummaryStatus(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStatisticsContractChannel : MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStatusesForAllDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStatusesForAllDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCounterSummaryStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCounterSummaryStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatisticsContractClient : System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract>, MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract {
        
        private BeginOperationDelegate onBeginGetCurrentStatusDelegate;
        
        private EndOperationDelegate onEndGetCurrentStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStatusesForAllDevicesDelegate;
        
        private EndOperationDelegate onEndGetStatusesForAllDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetStatusesForAllDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCounterSummaryStatusDelegate;
        
        private EndOperationDelegate onEndGetCounterSummaryStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetCounterSummaryStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StatisticsContractClient() {
        }
        
        public StatisticsContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StatisticsContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatisticsContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StatisticsContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCurrentStatusCompletedEventArgs> GetCurrentStatusCompleted;
        
        public event System.EventHandler<GetStatusesForAllDevicesCompletedEventArgs> GetStatusesForAllDevicesCompleted;
        
        public event System.EventHandler<GetCounterSummaryStatusCompletedEventArgs> GetCounterSummaryStatusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract.BeginGetCurrentStatus(int counterId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentStatus(counterId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract.EndGetCurrentStatus(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int counterId = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract)(this)).BeginGetCurrentStatus(counterId, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentStatus(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract)(this)).EndGetCurrentStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentStatusCompleted(object state) {
            if ((this.GetCurrentStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentStatusCompleted(this, new GetCurrentStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentStatusAsync(int counterId) {
            this.GetCurrentStatusAsync(counterId, null);
        }
        
        public void GetCurrentStatusAsync(int counterId, object userState) {
            if ((this.onBeginGetCurrentStatusDelegate == null)) {
                this.onBeginGetCurrentStatusDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentStatus);
            }
            if ((this.onEndGetCurrentStatusDelegate == null)) {
                this.onEndGetCurrentStatusDelegate = new EndOperationDelegate(this.OnEndGetCurrentStatus);
            }
            if ((this.onGetCurrentStatusCompletedDelegate == null)) {
                this.onGetCurrentStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentStatusDelegate, new object[] {
                        counterId}, this.onEndGetCurrentStatusDelegate, this.onGetCurrentStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract.BeginGetStatusesForAllDevices(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStatusesForAllDevices(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult> MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract.EndGetStatusesForAllDevices(System.IAsyncResult result) {
            return base.Channel.EndGetStatusesForAllDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetStatusesForAllDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract)(this)).BeginGetStatusesForAllDevices(callback, asyncState);
        }
        
        private object[] OnEndGetStatusesForAllDevices(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult> retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract)(this)).EndGetStatusesForAllDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStatusesForAllDevicesCompleted(object state) {
            if ((this.GetStatusesForAllDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStatusesForAllDevicesCompleted(this, new GetStatusesForAllDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStatusesForAllDevicesAsync() {
            this.GetStatusesForAllDevicesAsync(null);
        }
        
        public void GetStatusesForAllDevicesAsync(object userState) {
            if ((this.onBeginGetStatusesForAllDevicesDelegate == null)) {
                this.onBeginGetStatusesForAllDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetStatusesForAllDevices);
            }
            if ((this.onEndGetStatusesForAllDevicesDelegate == null)) {
                this.onEndGetStatusesForAllDevicesDelegate = new EndOperationDelegate(this.OnEndGetStatusesForAllDevices);
            }
            if ((this.onGetStatusesForAllDevicesCompletedDelegate == null)) {
                this.onGetStatusesForAllDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStatusesForAllDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetStatusesForAllDevicesDelegate, null, this.onEndGetStatusesForAllDevicesDelegate, this.onGetStatusesForAllDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract.BeginGetCounterSummaryStatus(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCounterSummaryStatus(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract.EndGetCounterSummaryStatus(System.IAsyncResult result) {
            return base.Channel.EndGetCounterSummaryStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetCounterSummaryStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract)(this)).BeginGetCounterSummaryStatus(id, callback, asyncState);
        }
        
        private object[] OnEndGetCounterSummaryStatus(System.IAsyncResult result) {
            MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult retVal = ((MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract)(this)).EndGetCounterSummaryStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCounterSummaryStatusCompleted(object state) {
            if ((this.GetCounterSummaryStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCounterSummaryStatusCompleted(this, new GetCounterSummaryStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCounterSummaryStatusAsync(int id) {
            this.GetCounterSummaryStatusAsync(id, null);
        }
        
        public void GetCounterSummaryStatusAsync(int id, object userState) {
            if ((this.onBeginGetCounterSummaryStatusDelegate == null)) {
                this.onBeginGetCounterSummaryStatusDelegate = new BeginOperationDelegate(this.OnBeginGetCounterSummaryStatus);
            }
            if ((this.onEndGetCounterSummaryStatusDelegate == null)) {
                this.onEndGetCounterSummaryStatusDelegate = new EndOperationDelegate(this.OnEndGetCounterSummaryStatus);
            }
            if ((this.onGetCounterSummaryStatusCompletedDelegate == null)) {
                this.onGetCounterSummaryStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCounterSummaryStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetCounterSummaryStatusDelegate, new object[] {
                        id}, this.onEndGetCounterSummaryStatusDelegate, this.onGetCounterSummaryStatusCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract CreateChannel() {
            return new StatisticsContractClientChannel(this);
        }
        
        private class StatisticsContractClientChannel : ChannelBase<MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract>, MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract {
            
            public StatisticsContractClientChannel(System.ServiceModel.ClientBase<MetroMonitor.MobileInterface.DataRepositoryService.IStatisticsContract> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCurrentStatus(int counterId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = counterId;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentStatus", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract EndGetCurrentStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract _result = ((MetroMonitor.MobileInterface.DataRepositoryService.StatisticsDataContract)(base.EndInvoke("GetCurrentStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStatusesForAllDevices(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetStatusesForAllDevices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult> EndGetStatusesForAllDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult> _result = ((System.Collections.ObjectModel.ObservableCollection<MetroMonitor.MobileInterface.DataRepositoryService.DeviceStatusResult>)(base.EndInvoke("GetStatusesForAllDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCounterSummaryStatus(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetCounterSummaryStatus", _args, callback, asyncState);
                return _result;
            }
            
            public MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult EndGetCounterSummaryStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult _result = ((MetroMonitor.MobileInterface.DataRepositoryService.DeviceMetricStatusResult)(base.EndInvoke("GetCounterSummaryStatus", _args, result)));
                return _result;
            }
        }
    }
}
